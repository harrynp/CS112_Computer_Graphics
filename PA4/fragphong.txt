#version 330
uniform mat4 viewMatrix, projMatrix;

uniform vec4 Ambient;
uniform vec3 LightColor;
uniform vec3 LightPosition;
uniform float Shininess;
uniform float Strength;
uniform vec3 EyeDirection;

uniform sampler2D myTextureSampler;

in vec3 Color;
in vec3 Normal;
in vec4 Position;

in vec2 UV;

out vec4 outputF;
 
void main()
{
	//Texture
	vec3 tex = texture(myTextureSampler, UV).rgb;
	//Ambient
	vec3 ambient = Ambient.rgb;

	//Diffuse
	vec3 eyePos = Position.xyz / Position.w;
	vec3 lightDir = normalize(LightPosition - eyePos);
	float diff = max(dot(Normal, lightDir), 0);
	vec3 diffuse = diff * LightColor;

	//Specular
	vec3 pos = vec3(viewMatrix * Position);
	vec3 viewDir = normalize(-pos);
	vec3 reflectDir = reflect(-lightDir, Normal);
	float spec = pow(max(dot(viewDir, reflectDir), 0), Shininess);
	vec3 specular = Strength * spec * LightColor;
	vec3 result = (ambient + diffuse + specular) ;

	outputF = vec4(result, 1);
	//outputF = vec4(Color,1);
}